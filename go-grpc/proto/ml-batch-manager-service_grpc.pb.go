// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchManagerServiceClient is the client API for BatchManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchManagerServiceClient interface {
	StopProcess(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Process, error)
}

type batchManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchManagerServiceClient(cc grpc.ClientConnInterface) BatchManagerServiceClient {
	return &batchManagerServiceClient{cc}
}

func (c *batchManagerServiceClient) StopProcess(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/com.onefactor.ml.batch.manager.api.BatchManagerService/stopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchManagerServiceServer is the server API for BatchManagerService service.
// All implementations must embed UnimplementedBatchManagerServiceServer
// for forward compatibility
type BatchManagerServiceServer interface {
	StopProcess(context.Context, *Get) (*Process, error)
	mustEmbedUnimplementedBatchManagerServiceServer()
}

// UnimplementedBatchManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBatchManagerServiceServer struct {
}

func (UnimplementedBatchManagerServiceServer) StopProcess(context.Context, *Get) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (UnimplementedBatchManagerServiceServer) mustEmbedUnimplementedBatchManagerServiceServer() {}

// UnsafeBatchManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchManagerServiceServer will
// result in compilation errors.
type UnsafeBatchManagerServiceServer interface {
	mustEmbedUnimplementedBatchManagerServiceServer()
}

func RegisterBatchManagerServiceServer(s grpc.ServiceRegistrar, srv BatchManagerServiceServer) {
	s.RegisterService(&BatchManagerService_ServiceDesc, srv)
}

func _BatchManagerService_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchManagerServiceServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.onefactor.ml.batch.manager.api.BatchManagerService/stopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchManagerServiceServer).StopProcess(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchManagerService_ServiceDesc is the grpc.ServiceDesc for BatchManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.onefactor.ml.batch.manager.api.BatchManagerService",
	HandlerType: (*BatchManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stopProcess",
			Handler:    _BatchManagerService_StopProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml-batch-manager-service.proto",
}
